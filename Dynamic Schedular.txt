******************************************************************
#!/bin/bash

# Path to the input file
INPUT_FILE="data.txt"

# Value to search for (e.g., search in the second column)
SEARCH_VALUE="Smith"

# Loop through each line in the file
while IFS='|' read -r column1 column2 column3 column4; do
    # Check if the second column matches the search value
    if [[ "$column2" == "$SEARCH_VALUE" ]]; then
        # Assign columns to variables
        VAR1="$column1"
        VAR2="$column2"
        VAR3="$column3"
        VAR4="$column4"

        # Print the results
        echo "Match found!"
        echo "Column 1: $VAR1"
        echo "Column 2: $VAR2"
        echo "Column 3: $VAR3"
        echo "Column 4: $VAR4"
    fi
done < "$INPUT_FILE"


******************************************************************

#!/bin/bash

# Prompt the user for the table name
read -p "Enter the table name: " table_name

# Validate the table name input
if [[ -z "$table_name" ]]; then
  echo "Table name cannot be empty."
  exit 1
fi

# Generate the dynamic SQL
sql_query="SELECT * FROM ${table_name};"

# Output the generated SQL
echo "Generated SQL Query:"
echo "$sql_query"

# Optionally save the SQL query to a file
read -p "Do you want to save the SQL query to a file? (y/n): " save_to_file
if [[ "$save_to_file" =~ ^[Yy]$ ]]; then
  file_name="${table_name}_query.sql"
  echo "$sql_query" > "$file_name"
  echo "SQL query saved to $file_name"
fi


******************************************************************

#!/bin/bash

# Prompt the user for table names
read -p "Enter table names for the join (separated by commas or spaces): " table_names

# Validate the input
if [[ -z "$table_names" ]]; then
  echo "Table names cannot be empty."
  exit 1
fi

# Normalize input: replace commas with spaces and remove extra spaces
table_names=$(echo "$table_names" | tr ',' ' ' | xargs)

# Convert the table names into an array
IFS=' ' read -r -a table_array <<< "$table_names"

# Check if at least two tables are provided
if [[ ${#table_array[@]} -lt 2 ]]; then
  echo "Please enter at least two table names for a join."
  exit 1
fi

# Prompt the user for the common column name
read -p "Enter the common column name for the join: " common_column

# Validate the common column name
if [[ -z "$common_column" ]]; then
  echo "Common column name cannot be empty."
  exit 1
fi

# Generate the SQL JOIN query
base_table="${table_array[0]}"
join_query="SELECT * FROM ${base_table}"

for (( i=1; i<${#table_array[@]}; i++ )); do
  join_query+=" INNER JOIN ${table_array[$i]} ON ${base_table}.${common_column} = ${table_array[$i]}.${common_column}"
done

# Display the generated SQL query
echo "Generated SQL Query:"
echo "$join_query;"

# Optionally save the SQL query to a file
read -p "Do you want to save the SQL query to a file? (y/n): " save_to_file
if [[ "$save_to_file" =~ ^[Yy]$ ]]; then
  file_name="join_query.sql"
  echo "$join_query;" > "$file_name"
  echo "SQL query saved to $file_name"
fi


******************************************************************************************

#!/bin/bash

# Prompt the user for table names
read -p "Enter table name(s) (separated by commas or spaces): " table_names

# Validate the table names input
if [[ -z "$table_names" ]]; then
  echo "Table names cannot be empty."
  exit 1
fi

# Normalize the input: replace commas with spaces and remove extra spaces
table_names=$(echo "$table_names" | tr ',' ' ' | xargs)

# Convert table names into an array
table_array=($table_names)

# Ensure there are at least two tables for a join
if [[ ${#table_array[@]} -lt 2 ]]; then
  echo "You need at least two tables to create a join query."
  exit 1
fi

# Initialize variables for selected columns and base table
selected_columns=""
base_table=${table_array[0]}

# Loop through each table to select columns
for table in "${table_array[@]}"; do
  echo "Enter columns to select from table '$table' (comma-separated, or * for all columns):"
  read columns

  # Validate column input
  if [[ -z "$columns" ]]; then
    echo "Columns cannot be empty. Please try again."
    exit 1
  fi

  # Append the columns with table prefix
  if [[ "$columns" == "*" ]]; then
    selected_columns+=" ${table}.*,"
  else
    IFS=',' read -r -a column_array <<< "$columns"
    for column in "${column_array[@]}"; do
      selected_columns+=" ${table}.${column},"
    done
  fi
done

# Remove the trailing comma from selected_columns
selected_columns=${selected_columns%,}

# Generate the base SQL
sql_query="SELECT $selected_columns FROM $base_table"

# Loop through the remaining tables to build the JOIN clause
for ((i = 1; i < ${#table_array[@]}; i++)); do
  current_table=${table_array[i]}
  read -p "Enter the join condition between $base_table and $current_table (e.g., $base_table.id = $current_table.id): " join_condition

  # Validate join condition input
  if [[ -z "$join_condition" ]]; then
    echo "Join condition cannot be empty. Please try again."
    exit 1
  fi

  # Append the JOIN clause
  sql_query+=" INNER JOIN $current_table ON $join_condition"
done

# Output the generated SQL
echo "Generated SQL Query:"
echo "$sql_query;"

# Optionally save the SQL query to a file
read -p "Do you want to save the SQL query to a file? (y/n): " save_to_file
if [[ "$save_to_file" =~ ^[Yy]$ ]]; then
  file_name="custom_generated_join_query.sql"
  echo "$sql_query;" > "$file_name"
  echo "SQL query saved to $file_name"
fi

******************************************************************

import re
import teradatasql

# Connection configuration - Update with your Teradata credentials
teradata_config = {
    'host': 'your_teradata_host',
    'user': 'your_username',
    'password': 'your_password'
}

# Utility function to map Teradata data types to Hive data types
def map_datatype(teradata_type):
    type_map = {
        'BYTEINT': 'TINYINT',
        'SMALLINT': 'SMALLINT',
        'INTEGER': 'INT',
        'BIGINT': 'BIGINT',
        'DECIMAL': 'DECIMAL',
        'FLOAT': 'DOUBLE',
        'CHAR': 'STRING',
        'VARCHAR': 'STRING',
        'DATE': 'DATE',
        'TIMESTAMP': 'TIMESTAMP',
    }
    match = re.match(r'(\w+)(\(\d+(?:,\d+)?\))?', teradata_type)
    base_type = match.group(1).upper()
    precision = match.group(2) if match.group(2) else ''
    return type_map.get(base_type, 'STRING') + precision

# Function to retrieve table definition from Teradata
def get_teradata_table_definition(table_name):
    with teradatasql.connect(
        host=teradata_config['host'], 
        user=teradata_config['user'], 
        password=teradata_config['password']
    ) as con:
        cursor = con.cursor()
        cursor.execute(f"HELP TABLE {table_name}")
        columns = cursor.fetchall()
        return columns

# Function to generate Hive table definition
def generate_hive_table_definition(teradata_columns, table_name):
    hive_columns = []
    for column in teradata_columns:
        column_name = column[0]
        column_type = map_datatype(column[1])
        hive_columns.append(f"  `{column_name}` {column_type}")

    hive_create_statement = f"""
CREATE TABLE {table_name}_hive (
{',\n'.join(hive_columns)}
)
STORED AS PARQUET;
"""
    return hive_create_statement

if __name__ == "__main__":
    table_name = input("Enter Teradata table name: ")
    columns = get_teradata_table_definition(table_name)
    hive_table_definition = generate_hive_table_definition(columns, table_name)
    print("\nHive Table Definition:\n")
    print(hive_table_definition)



***************************************************************************************


import re
import teradatasql

# Connection configuration - Update with your Teradata credentials
teradata_config = {
    'host': 'your_teradata_host',
    'user': 'your_username',
    'password': 'your_password'
}

# Utility function to map Teradata data types to Hive data types
def map_datatype(teradata_type):
    type_map = {
        'BYTEINT': 'TINYINT',
        'SMALLINT': 'SMALLINT',
        'INTEGER': 'INT',
        'BIGINT': 'BIGINT',
        'DECIMAL': 'DECIMAL',
        'FLOAT': 'DOUBLE',
        'CHAR': 'STRING',
        'VARCHAR': 'STRING',
        'DATE': 'DATE',
        'TIMESTAMP': 'TIMESTAMP',
    }
    match = re.match(r'(\w+)(\(\d+(?:,\d+)?\))?', teradata_type)
    base_type = match.group(1).upper()
    precision = match.group(2) if match.group(2) else ''
    return type_map.get(base_type, 'STRING') + precision

# Function to retrieve table definition from Teradata
def get_teradata_table_definition(table_name):
    with teradatasql.connect(
        host=teradata_config['host'], 
        user=teradata_config['user'], 
        password=teradata_config['password']
    ) as con:
        cursor = con.cursor()
        cursor.execute(f"HELP TABLE {table_name}")
        columns = cursor.fetchall()
        return columns

# Function to generate Hive table definition
def generate_hive_table_definition(teradata_columns, table_name, partition_columns=None):
    hive_columns = []
    for column in teradata_columns:
        column_name = column[0]
        column_type = map_datatype(column[1])
        hive_columns.append(f"  `{column_name}` {column_type}")

    partition_clause = ""
    if partition_columns:
        partition_definitions = [f"  `{col}` STRING" for col in partition_columns]  # Assuming partitions are STRING for simplicity
        partition_clause = f"PARTITIONED BY (\n{',\n'.join(partition_definitions)}\n)"

    hive_create_statement = f"""
CREATE TABLE {table_name}_hive (
{',\n'.join(hive_columns)}
)
{partition_clause}
STORED AS PARQUET;
"""
    return hive_create_statement

if __name__ == "__main__":
    table_name = input("Enter Teradata table name: ")
    columns = get_teradata_table_definition(table_name)
    partition_columns = input("Enter partition columns (comma-separated): ").split(',') if input("Do you want to add partitions? (yes/no): ").strip().lower() == 'yes' else None
    hive_table_definition = generate_hive_table_definition(columns, table_name, partition_columns)
    print("\nHive Table Definition:\n")
    print(hive_table_definition)

